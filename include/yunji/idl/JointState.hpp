/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: JointState.idl
  Source: JointState.hpp
  Cyclone DDS: v0.10.4

*****************************************************************/
#ifndef DDSCXX_JOINTSTATE_HPP
#define DDSCXX_JOINTSTATE_HPP

#include <cstdint>
#include <array>

namespace JointState
{
class State
{
private:
 float q_ = 0.0f;
 float dq_ = 0.0f;
 float tau_est_ = 0.0f;
 float temp_ = 0.0f;

public:
  State() = default;

  explicit State(
    float q,
    float dq,
    float tau_est,
    float temp) :
    q_(q),
    dq_(dq),
    tau_est_(tau_est),
    temp_(temp) { }

  float q() const { return this->q_; }
  float& q() { return this->q_; }
  void q(float _val_) { this->q_ = _val_; }
  float dq() const { return this->dq_; }
  float& dq() { return this->dq_; }
  void dq(float _val_) { this->dq_ = _val_; }
  float tau_est() const { return this->tau_est_; }
  float& tau_est() { return this->tau_est_; }
  void tau_est(float _val_) { this->tau_est_ = _val_; }
  float temp() const { return this->temp_; }
  float& temp() { return this->temp_; }
  void temp(float _val_) { this->temp_ = _val_; }

  bool operator==(const State& _other) const
  {
    (void) _other;
    return q_ == _other.q_ &&
      dq_ == _other.dq_ &&
      tau_est_ == _other.tau_est_ &&
      temp_ == _other.temp_;
  }

  bool operator!=(const State& _other) const
  {
    return !(*this == _other);
  }

};

class JointStateData
{
private:
 int32_t id_ = 0;
 uint64_t sequence_frame_ = 0;
 uint64_t timestamp_ = 0;
 int32_t num_ = 0;
 std::array<::JointState::State, 16> state_ = { };

public:
  JointStateData() = default;

  explicit JointStateData(
    int32_t id,
    uint64_t sequence_frame,
    uint64_t timestamp,
    int32_t num,
    const std::array<::JointState::State, 16>& state) :
    id_(id),
    sequence_frame_(sequence_frame),
    timestamp_(timestamp),
    num_(num),
    state_(state) { }

  int32_t id() const { return this->id_; }
  int32_t& id() { return this->id_; }
  void id(int32_t _val_) { this->id_ = _val_; }
  uint64_t sequence_frame() const { return this->sequence_frame_; }
  uint64_t& sequence_frame() { return this->sequence_frame_; }
  void sequence_frame(uint64_t _val_) { this->sequence_frame_ = _val_; }
  uint64_t timestamp() const { return this->timestamp_; }
  uint64_t& timestamp() { return this->timestamp_; }
  void timestamp(uint64_t _val_) { this->timestamp_ = _val_; }
  int32_t num() const { return this->num_; }
  int32_t& num() { return this->num_; }
  void num(int32_t _val_) { this->num_ = _val_; }
  const std::array<::JointState::State, 16>& state() const { return this->state_; }
  std::array<::JointState::State, 16>& state() { return this->state_; }
  void state(const std::array<::JointState::State, 16>& _val_) { this->state_ = _val_; }
  void state(std::array<::JointState::State, 16>&& _val_) { this->state_ = _val_; }

  bool operator==(const JointStateData& _other) const
  {
    (void) _other;
    return id_ == _other.id_ &&
      sequence_frame_ == _other.sequence_frame_ &&
      timestamp_ == _other.timestamp_ &&
      num_ == _other.num_ &&
      state_ == _other.state_;
  }

  bool operator!=(const JointStateData& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::JointState::State>::getTypeName()
{
  return "JointState::State";
}

template <> constexpr bool TopicTraits<::JointState::State>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::JointState::State>::type_map_blob_sz() { return 318; }
template<> constexpr unsigned int TopicTraits<::JointState::State>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::JointState::State>::type_map_blob() {
  static const uint8_t blob[] = {
 0x6b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xd1,  0xe7,  0x45,  0xcf,  0xc0,  0xdc,  0x23, 
 0xc6,  0xef,  0x54,  0xd2,  0xec,  0xa4,  0x9b,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x76,  0x94,  0xf4,  0xa6,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x47,  0xbc,  0xdc,  0xd7,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x8a,  0xf7,  0xae,  0xdf,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x3d,  0x80,  0x1a,  0xa5,  0x00, 
 0xa3,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x1d,  0x1e,  0x86,  0x5f,  0x98,  0xff,  0x5b, 
 0xf8,  0x7b,  0x4f,  0x22,  0xe3,  0x4e,  0x2d,  0x00,  0x8b,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x1a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x4a,  0x6f,  0x69,  0x6e, 
 0x74,  0x53,  0x74,  0x61,  0x74,  0x65,  0x3a,  0x3a,  0x53,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00, 
 0x63,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x02,  0x00,  0x00,  0x00,  0x71,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x03,  0x00,  0x00,  0x00,  0x64,  0x71,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x74,  0x61,  0x75,  0x5f,  0x65,  0x73,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x13,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x74,  0x65,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x1d,  0x1e,  0x86,  0x5f,  0x98,  0xff,  0x5b,  0xf8,  0x7b,  0x4f,  0x22,  0xe3,  0x4e,  0x2d,  0xf1, 
 0xd1,  0xe7,  0x45,  0xcf,  0xc0,  0xdc,  0x23,  0xc6,  0xef,  0x54,  0xd2,  0xec,  0xa4,  0x9b, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::JointState::State>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xd1,  0xe7,  0x45,  0xcf,  0xc0,  0xdc,  0x23,  0xc6,  0xef,  0x54,  0xd2, 
 0xec,  0xa4,  0x9b,  0x00,  0x57,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x1d,  0x1e,  0x86,  0x5f,  0x98,  0xff,  0x5b,  0xf8,  0x7b,  0x4f,  0x22, 
 0xe3,  0x4e,  0x2d,  0x00,  0x8f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::JointState::JointStateData>::getTypeName()
{
  return "JointState::JointStateData";
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::JointState::JointStateData>::type_map_blob_sz() { return 724; }
template<> constexpr unsigned int TopicTraits<::JointState::JointStateData>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::JointState::JointStateData>::type_map_blob() {
  static const uint8_t blob[] = {
 0xfb,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0xfb,  0xbd,  0xaa,  0x07,  0x89,  0x0a,  0x6c, 
 0xa7,  0x50,  0x71,  0xda,  0x62,  0x1a,  0x40,  0x00,  0x7c,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0xb8,  0x0b,  0xb7,  0x74,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0xef,  0xd2,  0x68,  0xec,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0xd7,  0xe6,  0xd5,  0x5b,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x0f,  0xc3,  0xcf,  0xbc,  0x00, 
 0x24,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf1,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x10,  0xf1,  0xd1,  0xe7,  0x45,  0xcf,  0xc0,  0xdc,  0x23,  0xc6,  0xef,  0x54, 
 0xd2,  0xec,  0xa4,  0x9b,  0x9e,  0xd3,  0x9e,  0x2e,  0xf1,  0xd1,  0xe7,  0x45,  0xcf,  0xc0,  0xdc,  0x23, 
 0xc6,  0xef,  0x54,  0xd2,  0xec,  0xa4,  0x9b,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x76,  0x94,  0xf4,  0xa6,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x47,  0xbc,  0xdc,  0xd7,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x8a,  0xf7,  0xae,  0xdf,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x3d,  0x80,  0x1a,  0xa5,  0x00, 
 0x8b,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x42,  0x4b,  0x4e,  0x0a,  0x48,  0xa7,  0x8e, 
 0x95,  0x7f,  0xff,  0xed,  0x04,  0xe0,  0x44,  0x00,  0xd4,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x4a,  0x6f,  0x69,  0x6e, 
 0x74,  0x53,  0x74,  0x61,  0x74,  0x65,  0x3a,  0x3a,  0x4a,  0x6f,  0x69,  0x6e,  0x74,  0x53,  0x74,  0x61, 
 0x74,  0x65,  0x44,  0x61,  0x74,  0x61,  0x00,  0x00,  0xa4,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x08,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x73,  0x65,  0x71,  0x75,  0x65,  0x6e,  0x63,  0x65, 
 0x5f,  0x66,  0x72,  0x61,  0x6d,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65, 
 0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x6e,  0x75,  0x6d,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x2c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf2,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x10,  0xf2,  0x1d,  0x1e,  0x86,  0x5f,  0x98,  0xff,  0x5b,  0xf8,  0x7b,  0x4f, 
 0x22,  0xe3,  0x4e,  0x2d,  0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00, 
 0xf2,  0x1d,  0x1e,  0x86,  0x5f,  0x98,  0xff,  0x5b,  0xf8,  0x7b,  0x4f,  0x22,  0xe3,  0x4e,  0x2d,  0x00, 
 0x8b,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x4a,  0x6f,  0x69,  0x6e,  0x74,  0x53,  0x74,  0x61,  0x74,  0x65,  0x3a,  0x3a, 
 0x53,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x71,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x64,  0x71,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x08,  0x00,  0x00,  0x00,  0x74,  0x61,  0x75,  0x5f, 
 0x65,  0x73,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x05,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x42,  0x4b,  0x4e,  0x0a,  0x48,  0xa7,  0x8e, 
 0x95,  0x7f,  0xff,  0xed,  0x04,  0xe0,  0x44,  0xf1,  0xfb,  0xbd,  0xaa,  0x07,  0x89,  0x0a,  0x6c,  0xa7, 
 0x50,  0x71,  0xda,  0x62,  0x1a,  0x40,  0xf2,  0x1d,  0x1e,  0x86,  0x5f,  0x98,  0xff,  0x5b,  0xf8,  0x7b, 
 0x4f,  0x22,  0xe3,  0x4e,  0x2d,  0xf1,  0xd1,  0xe7,  0x45,  0xcf,  0xc0,  0xdc,  0x23,  0xc6,  0xef,  0x54, 
 0xd2,  0xec,  0xa4,  0x9b, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::JointState::JointStateData>::type_info_blob() {
  static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xfb,  0xbd,  0xaa,  0x07,  0x89,  0x0a,  0x6c,  0xa7,  0x50,  0x71,  0xda, 
 0x62,  0x1a,  0x40,  0x00,  0x80,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xd1,  0xe7,  0x45,  0xcf,  0xc0,  0xdc,  0x23, 
 0xc6,  0xef,  0x54,  0xd2,  0xec,  0xa4,  0x9b,  0x00,  0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x42,  0x4b,  0x4e, 
 0x0a,  0x48,  0xa7,  0x8e,  0x95,  0x7f,  0xff,  0xed,  0x04,  0xe0,  0x44,  0x00,  0xd8,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x1d,  0x1e,  0x86,  0x5f,  0x98,  0xff,  0x5b,  0xf8,  0x7b,  0x4f,  0x22,  0xe3,  0x4e,  0x2d,  0x00, 
 0x8f,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::JointState::State>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::JointState::State>::getTypeName();
    }
};

template <>
struct topic_type_name<::JointState::JointStateData>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::JointState::JointStateData>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::JointState::State)
REGISTER_TOPIC_TYPE(::JointState::JointStateData)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::JointState::State>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::JointState::State& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.q()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.dq()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.tau_est()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.temp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::JointState::State& instance, bool as_key) {
  auto &props = get_type_props<::JointState::State>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::JointState::State& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.q()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.dq()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.tau_est()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.temp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::JointState::State& instance, bool as_key) {
  auto &props = get_type_props<::JointState::State>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::JointState::State& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.q()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.dq()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.tau_est()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.temp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::JointState::State& instance, bool as_key) {
  auto &props = get_type_props<::JointState::State>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::JointState::State& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.q()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.dq()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.tau_est()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.temp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::JointState::State& instance, bool as_key) {
  auto &props = get_type_props<::JointState::State>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::JointState::JointStateData>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::JointState::JointStateData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.num()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.state()) {  //array depth 1
      if (!write(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::JointState::JointStateData& instance, bool as_key) {
  auto &props = get_type_props<::JointState::JointStateData>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::JointState::JointStateData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.num()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (auto & a_1:instance.state()) {  //array depth 1
      if (!read(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::JointState::JointStateData& instance, bool as_key) {
  auto &props = get_type_props<::JointState::JointStateData>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::JointState::JointStateData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.num()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.state()) {  //array depth 1
      if (!move(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::JointState::JointStateData& instance, bool as_key) {
  auto &props = get_type_props<::JointState::JointStateData>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::JointState::JointStateData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.num()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.state()) {  //array depth 1
      if (!max(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::JointState::JointStateData& instance, bool as_key) {
  auto &props = get_type_props<::JointState::JointStateData>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_JOINTSTATE_HPP
