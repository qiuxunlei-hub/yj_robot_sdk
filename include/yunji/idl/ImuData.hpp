/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: ImuData.idl
  Source: ImuData.hpp
  Cyclone DDS: v0.10.4

*****************************************************************/
#ifndef DDSCXX_IMUDATA_HPP
#define DDSCXX_IMUDATA_HPP

#include <cstdint>
#include <array>

namespace ImuData
{
class Imu
{
private:
 int32_t id_ = 0;
 uint64_t sequence_frame_ = 0;
 uint64_t timestamp_ = 0;
 std::array<float, 3> accelerometer_ = { };
 std::array<float, 3> gyroscope_ = { };
 std::array<float, 4> quaternion_ = { };

public:
  Imu() = default;

  explicit Imu(
    int32_t id,
    uint64_t sequence_frame,
    uint64_t timestamp,
    const std::array<float, 3>& accelerometer,
    const std::array<float, 3>& gyroscope,
    const std::array<float, 4>& quaternion) :
    id_(id),
    sequence_frame_(sequence_frame),
    timestamp_(timestamp),
    accelerometer_(accelerometer),
    gyroscope_(gyroscope),
    quaternion_(quaternion) { }

  int32_t id() const { return this->id_; }
  int32_t& id() { return this->id_; }
  void id(int32_t _val_) { this->id_ = _val_; }
  uint64_t sequence_frame() const { return this->sequence_frame_; }
  uint64_t& sequence_frame() { return this->sequence_frame_; }
  void sequence_frame(uint64_t _val_) { this->sequence_frame_ = _val_; }
  uint64_t timestamp() const { return this->timestamp_; }
  uint64_t& timestamp() { return this->timestamp_; }
  void timestamp(uint64_t _val_) { this->timestamp_ = _val_; }
  const std::array<float, 3>& accelerometer() const { return this->accelerometer_; }
  std::array<float, 3>& accelerometer() { return this->accelerometer_; }
  void accelerometer(const std::array<float, 3>& _val_) { this->accelerometer_ = _val_; }
  void accelerometer(std::array<float, 3>&& _val_) { this->accelerometer_ = _val_; }
  const std::array<float, 3>& gyroscope() const { return this->gyroscope_; }
  std::array<float, 3>& gyroscope() { return this->gyroscope_; }
  void gyroscope(const std::array<float, 3>& _val_) { this->gyroscope_ = _val_; }
  void gyroscope(std::array<float, 3>&& _val_) { this->gyroscope_ = _val_; }
  const std::array<float, 4>& quaternion() const { return this->quaternion_; }
  std::array<float, 4>& quaternion() { return this->quaternion_; }
  void quaternion(const std::array<float, 4>& _val_) { this->quaternion_ = _val_; }
  void quaternion(std::array<float, 4>&& _val_) { this->quaternion_ = _val_; }

  bool operator==(const Imu& _other) const
  {
    (void) _other;
    return id_ == _other.id_ &&
      sequence_frame_ == _other.sequence_frame_ &&
      timestamp_ == _other.timestamp_ &&
      accelerometer_ == _other.accelerometer_ &&
      gyroscope_ == _other.gyroscope_ &&
      quaternion_ == _other.quaternion_;
  }

  bool operator!=(const Imu& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::ImuData::Imu>::getTypeName()
{
  return "ImuData::Imu";
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::ImuData::Imu>::type_map_blob_sz() { return 502; }
template<> constexpr unsigned int TopicTraits<::ImuData::Imu>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::ImuData::Imu>::type_map_blob() {
  static const uint8_t blob[] = {
 0xae,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x2b,  0xc1,  0x81,  0xba,  0x50,  0xca,  0x09, 
 0x13,  0x54,  0xfd,  0x5a,  0xfc,  0x50,  0xd4,  0x00,  0x96,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x86,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0xb8,  0x0b,  0xb7,  0x74,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0xef,  0xd2,  0x68,  0xec,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0xd7,  0xe6,  0xd5,  0x5b,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x03,  0x09,  0x0e,  0x12,  0x75,  0x69,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x03,  0x09,  0x6b,  0x3b,  0x2d,  0x85,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x04,  0x09,  0x75,  0xb9, 
 0xaa,  0xa0,  0x00,  0x00,  0x15,  0x01,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x32,  0x75,  0x6e, 
 0xc4,  0xd8,  0x4f,  0xa8,  0x2e,  0x34,  0x6a,  0x83,  0xcd,  0x85,  0x6e,  0x00,  0xfd,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00, 
 0x49,  0x6d,  0x75,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x49,  0x6d,  0x75,  0x00,  0x00,  0x00,  0x00, 
 0xd9,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x31,  0x00,  0x04,  0x00,  0x03,  0x00,  0x00,  0x00,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1d,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0x00,  0x0f,  0x00,  0x00,  0x00, 
 0x73,  0x65,  0x71,  0x75,  0x65,  0x6e,  0x63,  0x65,  0x5f,  0x66,  0x72,  0x61,  0x6d,  0x65,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0x00, 
 0x0a,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00, 
 0x28,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x03,  0x09,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x61,  0x63,  0x63,  0x65, 
 0x6c,  0x65,  0x72,  0x6f,  0x6d,  0x65,  0x74,  0x65,  0x72,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x03,  0x09,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x67,  0x79,  0x72,  0x6f,  0x73,  0x63,  0x6f,  0x70, 
 0x65,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x04,  0x09,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x71,  0x75,  0x61,  0x74,  0x65,  0x72,  0x6e,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x32,  0x75,  0x6e,  0xc4,  0xd8,  0x4f,  0xa8, 
 0x2e,  0x34,  0x6a,  0x83,  0xcd,  0x85,  0x6e,  0xf1,  0x2b,  0xc1,  0x81,  0xba,  0x50,  0xca,  0x09,  0x13, 
 0x54,  0xfd,  0x5a,  0xfc,  0x50,  0xd4, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::ImuData::Imu>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x2b,  0xc1,  0x81,  0xba,  0x50,  0xca,  0x09,  0x13,  0x54,  0xfd,  0x5a, 
 0xfc,  0x50,  0xd4,  0x00,  0x9a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x32,  0x75,  0x6e,  0xc4,  0xd8,  0x4f,  0xa8,  0x2e,  0x34,  0x6a,  0x83, 
 0xcd,  0x85,  0x6e,  0x00,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::ImuData::Imu>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::ImuData::Imu>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::ImuData::Imu)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::ImuData::Imu>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::ImuData::Imu& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.accelerometer()[0], instance.accelerometer().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.gyroscope()[0], instance.gyroscope().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.quaternion()[0], instance.quaternion().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::ImuData::Imu& instance, bool as_key) {
  auto &props = get_type_props<::ImuData::Imu>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::ImuData::Imu& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.accelerometer()[0], instance.accelerometer().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.gyroscope()[0], instance.gyroscope().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.quaternion()[0], instance.quaternion().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::ImuData::Imu& instance, bool as_key) {
  auto &props = get_type_props<::ImuData::Imu>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::ImuData::Imu& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.accelerometer()[0], instance.accelerometer().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.gyroscope()[0], instance.gyroscope().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.quaternion()[0], instance.quaternion().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::ImuData::Imu& instance, bool as_key) {
  auto &props = get_type_props<::ImuData::Imu>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::ImuData::Imu& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.accelerometer()[0], instance.accelerometer().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.gyroscope()[0], instance.gyroscope().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.quaternion()[0], instance.quaternion().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::ImuData::Imu& instance, bool as_key) {
  auto &props = get_type_props<::ImuData::Imu>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_IMUDATA_HPP
