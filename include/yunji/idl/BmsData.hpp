/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: BmsData.idl
  Source: BmsData.hpp
  Cyclone DDS: v0.10.4

*****************************************************************/
#ifndef DDSCXX_BMSDATA_HPP
#define DDSCXX_BMSDATA_HPP

#include <cstdint>

namespace BmsData
{
class Bms
{
private:
 int32_t id_ = 0;
 uint64_t sequence_frame_ = 0;
 uint64_t timestamp_ = 0;
 float voltage_ = 0.0f;
 float current_ = 0.0f;
 float soc_ = 0.0f;
 float temp_ = 0.0f;

public:
  Bms() = default;

  explicit Bms(
    int32_t id,
    uint64_t sequence_frame,
    uint64_t timestamp,
    float voltage,
    float current,
    float soc,
    float temp) :
    id_(id),
    sequence_frame_(sequence_frame),
    timestamp_(timestamp),
    voltage_(voltage),
    current_(current),
    soc_(soc),
    temp_(temp) { }

  int32_t id() const { return this->id_; }
  int32_t& id() { return this->id_; }
  void id(int32_t _val_) { this->id_ = _val_; }
  uint64_t sequence_frame() const { return this->sequence_frame_; }
  uint64_t& sequence_frame() { return this->sequence_frame_; }
  void sequence_frame(uint64_t _val_) { this->sequence_frame_ = _val_; }
  uint64_t timestamp() const { return this->timestamp_; }
  uint64_t& timestamp() { return this->timestamp_; }
  void timestamp(uint64_t _val_) { this->timestamp_ = _val_; }
  float voltage() const { return this->voltage_; }
  float& voltage() { return this->voltage_; }
  void voltage(float _val_) { this->voltage_ = _val_; }
  float current() const { return this->current_; }
  float& current() { return this->current_; }
  void current(float _val_) { this->current_ = _val_; }
  float soc() const { return this->soc_; }
  float& soc() { return this->soc_; }
  void soc(float _val_) { this->soc_ = _val_; }
  float temp() const { return this->temp_; }
  float& temp() { return this->temp_; }
  void temp(float _val_) { this->temp_ = _val_; }

  bool operator==(const Bms& _other) const
  {
    (void) _other;
    return id_ == _other.id_ &&
      sequence_frame_ == _other.sequence_frame_ &&
      timestamp_ == _other.timestamp_ &&
      voltage_ == _other.voltage_ &&
      current_ == _other.current_ &&
      soc_ == _other.soc_ &&
      temp_ == _other.temp_;
  }

  bool operator!=(const Bms& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::BmsData::Bms>::getTypeName()
{
  return "BmsData::Bms";
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::BmsData::Bms>::type_map_blob_sz() { return 458; }
template<> constexpr unsigned int TopicTraits<::BmsData::Bms>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::BmsData::Bms>::type_map_blob() {
  static const uint8_t blob[] = {
 0x9b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x18,  0x8e,  0x32,  0xca,  0x06,  0x83,  0xf1, 
 0x12,  0x2c,  0xb4,  0x18,  0xd2,  0x14,  0x47,  0x00,  0x83,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x73,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0xb8,  0x0b,  0xb7,  0x74,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0xef,  0xd2,  0x68,  0xec,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0xd7,  0xe6,  0xd5,  0x5b,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xe4,  0x37,  0xba,  0x43,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x43,  0xb5,  0xc9,  0x17,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xc7,  0xd5,  0xf8,  0x49,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x3d,  0x80,  0x1a,  0xa5,  0x00, 
 0xff,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x8a,  0x90,  0xbb,  0xd3,  0x93,  0xa2,  0xe3, 
 0x44,  0xad,  0x89,  0xd6,  0xaf,  0x56,  0xf1,  0x00,  0xe7,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x42,  0x6d,  0x73,  0x44, 
 0x61,  0x74,  0x61,  0x3a,  0x3a,  0x42,  0x6d,  0x73,  0x00,  0x00,  0x00,  0x00,  0xc3,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x73,  0x65,  0x71,  0x75, 
 0x65,  0x6e,  0x63,  0x65,  0x5f,  0x66,  0x72,  0x61,  0x6d,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x74,  0x69,  0x6d,  0x65,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x08,  0x00,  0x00,  0x00,  0x76,  0x6f,  0x6c,  0x74, 
 0x61,  0x67,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x08,  0x00,  0x00,  0x00,  0x63,  0x75,  0x72,  0x72,  0x65,  0x6e,  0x74,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x73,  0x6f,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x05,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6d,  0x70, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x8a,  0x90,  0xbb, 
 0xd3,  0x93,  0xa2,  0xe3,  0x44,  0xad,  0x89,  0xd6,  0xaf,  0x56,  0xf1,  0xf1,  0x18,  0x8e,  0x32,  0xca, 
 0x06,  0x83,  0xf1,  0x12,  0x2c,  0xb4,  0x18,  0xd2,  0x14,  0x47, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::BmsData::Bms>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x18,  0x8e,  0x32,  0xca,  0x06,  0x83,  0xf1,  0x12,  0x2c,  0xb4,  0x18, 
 0xd2,  0x14,  0x47,  0x00,  0x87,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x8a,  0x90,  0xbb,  0xd3,  0x93,  0xa2,  0xe3,  0x44,  0xad,  0x89,  0xd6, 
 0xaf,  0x56,  0xf1,  0x00,  0xeb,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::BmsData::Bms>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::BmsData::Bms>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::BmsData::Bms)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::BmsData::Bms>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::BmsData::Bms& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.voltage()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.current()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.soc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.temp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::BmsData::Bms& instance, bool as_key) {
  auto &props = get_type_props<::BmsData::Bms>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::BmsData::Bms& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.voltage()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.current()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.soc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.temp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::BmsData::Bms& instance, bool as_key) {
  auto &props = get_type_props<::BmsData::Bms>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::BmsData::Bms& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.voltage()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.current()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.soc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.temp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::BmsData::Bms& instance, bool as_key) {
  auto &props = get_type_props<::BmsData::Bms>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::BmsData::Bms& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.sequence_frame()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.voltage()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.current()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.soc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.temp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::BmsData::Bms& instance, bool as_key) {
  auto &props = get_type_props<::BmsData::Bms>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_BMSDATA_HPP
