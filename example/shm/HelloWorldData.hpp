/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: HelloWorldData.idl
  Source: HelloWorldData.hpp
  Cyclone DDS: v0.10.4

*****************************************************************/
#ifndef DDSCXX_HELLOWORLDDATA_HPP
#define DDSCXX_HELLOWORLDDATA_HPP

#include <cstdint>
#include <array>

namespace ThroughputModule
{
class DataType_262144
{
private:
 uint64_t count_ = 0;
 uint32_t payloadsize_ = 0;
 std::array<uint8_t, 1012> payload_ = { };

public:
  DataType_262144() = default;

  explicit DataType_262144(
    uint64_t count,
    uint32_t payloadsize,
    const std::array<uint8_t, 1012>& payload) :
    count_(count),
    payloadsize_(payloadsize),
    payload_(payload) { }

  uint64_t count() const { return this->count_; }
  uint64_t& count() { return this->count_; }
  void count(uint64_t _val_) { this->count_ = _val_; }
  uint32_t payloadsize() const { return this->payloadsize_; }
  uint32_t& payloadsize() { return this->payloadsize_; }
  void payloadsize(uint32_t _val_) { this->payloadsize_ = _val_; }
  const std::array<uint8_t, 1012>& payload() const { return this->payload_; }
  std::array<uint8_t, 1012>& payload() { return this->payload_; }
  void payload(const std::array<uint8_t, 1012>& _val_) { this->payload_ = _val_; }
  void payload(std::array<uint8_t, 1012>&& _val_) { this->payload_ = _val_; }

  bool operator==(const DataType_262144& _other) const
  {
    (void) _other;
    return count_ == _other.count_ &&
      payloadsize_ == _other.payloadsize_ &&
      payload_ == _other.payload_;
  }

  bool operator!=(const DataType_262144& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::ThroughputModule::DataType_262144>::getTypeName()
{
  return "ThroughputModule::DataType_262144";
}

template <> constexpr bool TopicTraits<::ThroughputModule::DataType_262144>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::ThroughputModule::DataType_262144>::type_map_blob_sz() { return 338; }
template<> constexpr unsigned int TopicTraits<::ThroughputModule::DataType_262144>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::ThroughputModule::DataType_262144>::type_map_blob() {
  static const uint8_t blob[] = {
 0x69,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x44,  0xed,  0x9e,  0x4f,  0x12,  0xc4,  0x94, 
 0x75,  0xd4,  0x21,  0x18,  0x32,  0xc6,  0xd1,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x08,  0xe2,  0x94,  0x2a,  0x04,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x1c,  0x0d,  0xb3,  0xaa,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x91,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf4,  0x03,  0x00,  0x00,  0x02,  0x32,  0x1c,  0x3c,  0xf4,  0x00,  0x00,  0x00, 
 0xb6,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x53,  0x14,  0x96,  0x37,  0xf7,  0x17,  0x6b, 
 0xbd,  0xf1,  0xc5,  0x41,  0x3b,  0x3b,  0xe9,  0x00,  0x9e,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x54,  0x68,  0x72,  0x6f, 
 0x75,  0x67,  0x68,  0x70,  0x75,  0x74,  0x4d,  0x6f,  0x64,  0x75,  0x6c,  0x65,  0x3a,  0x3a,  0x44,  0x61, 
 0x74,  0x61,  0x54,  0x79,  0x70,  0x65,  0x5f,  0x32,  0x36,  0x32,  0x31,  0x34,  0x34,  0x00,  0x00,  0x00, 
 0x66,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x08,  0x00,  0x06,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x75,  0x6e,  0x74,  0x00,  0x00,  0x00, 
 0x1a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x70,  0x61,  0x79,  0x6c,  0x6f,  0x61,  0x64,  0x73,  0x69,  0x7a,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x26,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x91,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf4,  0x03,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x70,  0x61,  0x79,  0x6c,  0x6f,  0x61,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x53,  0x14,  0x96,  0x37,  0xf7,  0x17,  0x6b,  0xbd,  0xf1,  0xc5,  0x41, 
 0x3b,  0x3b,  0xe9,  0xf1,  0x44,  0xed,  0x9e,  0x4f,  0x12,  0xc4,  0x94,  0x75,  0xd4,  0x21,  0x18,  0x32, 
 0xc6,  0xd1, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::ThroughputModule::DataType_262144>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x44,  0xed,  0x9e,  0x4f,  0x12,  0xc4,  0x94,  0x75,  0xd4,  0x21,  0x18, 
 0x32,  0xc6,  0xd1,  0x00,  0x55,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x53,  0x14,  0x96,  0x37,  0xf7,  0x17,  0x6b,  0xbd,  0xf1,  0xc5,  0x41, 
 0x3b,  0x3b,  0xe9,  0x00,  0xa2,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::ThroughputModule::DataType_262144>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::ThroughputModule::DataType_262144>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::ThroughputModule::DataType_262144)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::ThroughputModule::DataType_262144>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::ThroughputModule::DataType_262144& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.count()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.payloadsize()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.payload()[0], instance.payload().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::ThroughputModule::DataType_262144& instance, bool as_key) {
  auto &props = get_type_props<::ThroughputModule::DataType_262144>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::ThroughputModule::DataType_262144& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.count()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.payloadsize()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.payload()[0], instance.payload().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::ThroughputModule::DataType_262144& instance, bool as_key) {
  auto &props = get_type_props<::ThroughputModule::DataType_262144>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::ThroughputModule::DataType_262144& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.count()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.payloadsize()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.payload()[0], instance.payload().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::ThroughputModule::DataType_262144& instance, bool as_key) {
  auto &props = get_type_props<::ThroughputModule::DataType_262144>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::ThroughputModule::DataType_262144& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.count()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.payloadsize()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.payload()[0], instance.payload().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::ThroughputModule::DataType_262144& instance, bool as_key) {
  auto &props = get_type_props<::ThroughputModule::DataType_262144>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_HELLOWORLDDATA_HPP
